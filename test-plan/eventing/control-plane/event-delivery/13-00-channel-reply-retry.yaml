# Receives and logs messages, producing a reply.
apiVersion: v1
kind: Pod
metadata:
  name: sink-ack-conformance
  namespace: conformance
  labels:
    component: conformance-sink
    app: sink-ack-conformance
spec:
  containers:
  - name: sink-ack-conformance
    image: pmercado/recordevents
    env:
    - name: POD_NAME
      valueFrom:
        fieldRef:
          fieldPath: metadata.name
    - name: SYSTEM_NAMESPACE
      valueFrom:
        fieldRef:
          fieldPath: metadata.namespace
    - name: EVENT_GENERATORS
      value: receiver
    - name: EVENT_LOGS
      value: logger
    - name: REPLY
      value: "true"
    - name: REPLY_EVENT_TYPE
      value: "conformance.reply"
    - name: REPLY_EVENT_SOURCE
      valueFrom:
        fieldRef:
          fieldPath: metadata.name
    - name: REPLY_EVENT_DATA
      value: "conformance response message"
    ports:
    - containerPort: 8080

---

# Expose recordevents as a service
apiVersion: v1
kind: Service
metadata:
  name: sink-ack-conformance
  namespace: conformance
spec:
  selector:
    app: sink-ack-conformance
  ports:
    - name: http
      protocol: TCP
      port: 80
      targetPort: 8080

---

# Fails to receive first 3 and logs messages.
apiVersion: v1
kind: Pod
metadata:
  name: sink-reply-retry-conformance
  namespace: conformance
  labels:
    component: conformance-sink
    app: sink-reply-retry-conformance
spec:
  containers:
  - name: sink-reply-retry-conformance
    image: pmercado/recordevents
    env:
    - name: POD_NAME
      valueFrom:
        fieldRef:
          fieldPath: metadata.name
    - name: SYSTEM_NAMESPACE
      valueFrom:
        fieldRef:
          fieldPath: metadata.namespace
    - name: EVENT_GENERATORS
      value: receiver
    - name: EVENT_LOGS
      value: logger
    - name: REPLY
      value: "false"
      # Return NACK 3 first times. Combining this with a
      # subscription delivery that retries 3 times will
      # result in 3 first events NACK, then ACK.
    - name: SKIP_ALGORITHM
      value: sequence
    - name: SKIP_COUNTER
      value: "3"

    ports:
    - containerPort: 8080

---

# Expose recordevents as a service
apiVersion: v1
kind: Service
metadata:
  name: sink-reply-retry-conformance
  namespace: conformance
spec:
  selector:
    app: sink-reply-retry-conformance
  ports:
    - name: http
      protocol: TCP
      port: 80
      targetPort: 8080

---

apiVersion: messaging.knative.dev/v1
kind: Subscription
metadata:
  name: sink-reply-retry-conformance
  namespace: conformance
spec:
  channel:
    apiVersion: messaging.knative.dev/v1
    kind: InMemoryChannel
    name: conformance-channel
  subscriber:
    ref:
      apiVersion: v1
      kind: Service
      name: sink-ack-conformance
  # Set retries to 3 and backoff to 2 seconds.
  delivery:
    retry: 3
    backoffPolicy: linear
    backoffDelay: PT2S

  # Set reply to the secondary Sink.
  reply:
    ref:
      apiVersion: v1
      kind: Service
      name: sink-reply-retry-conformance

